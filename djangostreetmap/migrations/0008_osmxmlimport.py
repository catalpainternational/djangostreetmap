# Generated by Django 4.0 on 2022-01-14 07:33

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('djangostreetmap', '0007_alter_osmnode_lat_alter_osmnode_lon'),
    ]

    operations = [
        migrations.CreateModel(
            name='OsmXmlImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField()),
            ],
        ),
        migrations.RunSQL(
'''
ALTER TABLE djangostreetmap_osmxmlimport alter "data" type xml using data::xml;

CREATE OR REPLACE FUNCTION overpass_import_nodes (new record)
    RETURNS void
    AS $$
BEGIN
    INSERT INTO djangostreetmap_osmnode AS node (id, lat, lon)
    SELECT DISTINCT ON (node_id)
        node_id,
        lon,
        lat
    FROM
        djangostreetmap_osmxmlimport,
        xmltable('//osm/node' passing data columns "node_id" bigint path '@id', "lon" float path '@lat', "lat" float path '@lat')
    WHERE
        djangostreetmap_osmxmlimport.id = NEW.id
    ON CONFLICT ON CONSTRAINT djangostreetmap_osmnode_pkey
        DO UPDATE SET
            lat = excluded.lat,
            lon = excluded.lon
        WHERE
            node.id = excluded.id;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overpass_import_node_tags (new record)
    RETURNS void
    AS $$
BEGIN
    UPDATE
        djangostreetmap_osmnode
    SET
        tags = tags_query.tags
    FROM (
        SELECT
            xmltable.id,
            jsonb_object_agg(k, v) AS tags
        FROM
            djangostreetmap_osmxmlimport,
            xmltable('//osm/node/tag' passing data columns "id" bigint path '../@id', "k" text path '@k', "v" text path '@v')
        WHERE
            djangostreetmap_osmxmlimport.id = NEW.id
        GROUP BY
            xmltable.id) tags_query
WHERE
    tags_query.id = djangostreetmap_osmnode.id;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overpass_import_ways (new record)
    RETURNS void
    AS $$
BEGIN
    INSERT INTO djangostreetmap_osmway AS way (id)
    SELECT DISTINCT
        (xmltable.id)
    FROM
        djangostreetmap_osmxmlimport,
        xmltable('//way' passing data columns "id" int path '@id')
    WHERE
        djangostreetmap_osmxmlimport.id = NEW.id
    ON CONFLICT
        DO NOTHING;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overpass_import_way_tags (new record)
    RETURNS void
    AS $$
BEGIN
    UPDATE
        djangostreetmap_osmway
    SET
        tags = tags_query.tags
    FROM (
        SELECT
            xmltable.id,
            jsonb_object_agg(k, v) AS tags
        FROM
            djangostreetmap_osmxmlimport,
            xmltable('//osm/way/tag' passing data columns "id" bigint path '../@id', "k" text path '@k', "v" text path '@v')
        WHERE
            djangostreetmap_osmxmlimport.id = NEW.id
        GROUP BY
            xmltable.id) tags_query
WHERE
    tags_query.id = djangostreetmap_osmway.id;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overpass_import_relations (new record)
    RETURNS void
    AS $$
BEGIN
    INSERT INTO djangostreetmap_osmrelation AS relation (id)
    SELECT DISTINCT
        (xmltable.id)
    FROM
        djangostreetmap_osmxmlimport,
        xmltable('//relation' passing data columns "id" int path '@id')
    WHERE
        djangostreetmap_osmxmlimport.id = NEW.id
    ON CONFLICT
        DO NOTHING;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overpass_import_relation_tags (new record)
    RETURNS void
    AS $$
BEGIN
    UPDATE
        djangostreetmap_osmrelation
    SET
        tags = tags_query.tags
    FROM (
        SELECT
            xmltable.id,
            jsonb_object_agg(k, v) AS tags
        FROM
            djangostreetmap_osmxmlimport,
            xmltable('//osm/relation/tag' passing data columns "id" bigint path '../@id', "k" text path '@k', "v" text path '@v')
        WHERE
            djangostreetmap_osmxmlimport.id = NEW.id
        GROUP BY
            xmltable.id) tags_query
WHERE
    tags_query.id = djangostreetmap_osmrelation.id;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overpass_import_osmnodeway (new record)
    RETURNS void
    AS $$
BEGIN
    DELETE FROM djangostreetmap_osmnodeway
    WHERE way_id IN (
            SELECT
                xmltable.id
            FROM
                djangostreetmap_osmxmlimport,
                xmltable('//way' passing data columns "id" bigint path '@id')
            WHERE
                djangostreetmap_osmxmlimport.id = NEW.id);
    --ensure that referenced nodes ('nd' tags) exist in the nodes table
    INSERT INTO djangostreetmap_osmnode (id)
    SELECT
        node_id
    FROM
        djangostreetmap_osmxmlimport,
        xmltable('//way/nd' passing data columns node_id bigint path '@ref')
    WHERE
        djangostreetmap_osmxmlimport.id = NEW.id
    ON CONFLICT
        DO NOTHING;
    INSERT INTO djangostreetmap_osmnodeway (way_id, node_id, ORDINALITY)
    SELECT
        xmltable.id,
        node_id,
        ord
    FROM
        djangostreetmap_osmxmlimport,
        xmltable('//way/nd' passing data columns "id" bigint path '../@id', node_id bigint path '@ref', ord FOR ORDINALITY)
    WHERE
        djangostreetmap_osmxmlimport.id = NEW.id;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overpass_import_osmrelationmembers (new record)
    RETURNS void
    AS $$
BEGIN
    DELETE FROM djangostreetmap_osmrelationmember
    WHERE relation_id IN (
            SELECT
                relation_id
            FROM
                djangostreetmap_osmxmlimport,
                xmltable('//osm/relation' passing data columns "relation_id" bigint path '@id')

                WHERE
                    djangostreetmap_osmxmlimport.id = NEW.id
                );
    --ensure that referenced nodes and ways in 'member' tags exist in the nodes table
    INSERT INTO djangostreetmap_osmnode (id)
    SELECT
        node_id
    FROM
        djangostreetmap_osmxmlimport,
        xmltable('//osm/relation/member[@type="node"]' passing data columns node_id bigint path '@ref')
    WHERE
        djangostreetmap_osmxmlimport.id = NEW.id
    ON CONFLICT
        DO NOTHING;
    INSERT INTO djangostreetmap_osmway (id)
    SELECT
        way_id
    FROM
        djangostreetmap_osmxmlimport,
        xmltable('//osm/relation/member[@type="way"]' passing data columns way_id bigint path '@ref')
    WHERE
        djangostreetmap_osmxmlimport.id = NEW.id
    ON CONFLICT
        DO NOTHING;
    WITH instances AS (
        SELECT
            xmltable.*
        FROM
            djangostreetmap_osmxmlimport,
            xmltable('//osm/relation/member' passing data columns "relation_id" bigint path '../@id', "type" text path '@type', "ref" bigint path '@ref', ROLE text path '@role', ORDINALITY FOR ORDINALITY)
            WHERE djangostreetmap_osmxmlimport.id = NEW.id
            )
    INSERT INTO djangostreetmap_osmrelationmember (node_id, way_id, ROLE, relation_id, ORDINALITY)
    SELECT
        CASE WHEN TYPE = 'node' THEN
            ref
        ELSE
            NULL
        END AS node_id,
        CASE WHEN TYPE = 'way' THEN
            ref
        ELSE
            NULL
        END AS way_id,
        ROLE,
        relation_id,
        ORDINALITY
    FROM
        instances;
END;
$$
LANGUAGE 'plpgsql';

CREATE OR REPLACE FUNCTION overpass_import_func ()
    RETURNS TRIGGER
    AS $$
BEGIN
    PERFORM
        overpass_import_nodes (new);
    PERFORM
        overpass_import_node_tags (new);
    PERFORM
        overpass_import_ways (new);
    PERFORM
        overpass_import_way_tags (new);
    PERFORM
        overpass_import_relations (new);
    PERFORM
        overpass_import_relation_tags (new);
    PERFORM
        overpass_import_osmnodeway (new);
    PERFORM
        overpass_import_relations (new);
    PERFORM
        overpass_import_osmrelationmembers (new);
    RETURN new;
END
$$
LANGUAGE 'plpgsql';

CREATE TRIGGER overpass_import
    AFTER INSERT ON djangostreetmap_osmxmlimport FOR EACH ROW
    EXECUTE FUNCTION overpass_import_func ();
'''
 )
]
